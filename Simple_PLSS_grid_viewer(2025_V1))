import tkinter as tk

# --------------------------------------------
# Grid Definitions
# --------------------------------------------

QUARTER_POSITIONS = {
    'NW': (0, 0),
    'NE': (0, 1),
    'SW': (1, 0),
    'SE': (1, 1),
}

# --------------------------------------------
# Parser & Coordinate Resolver
# --------------------------------------------

def parse_aliquots(description):
    """
    Parses a string like "NE 1/4 NW 1/4 SW 1/4" into a path of quarters
    """
    tokens = description.upper().split()
    path = []
    i = 0
    while i < len(tokens):
        if tokens[i] in ('NW', 'NE', 'SW', 'SE') and (i+1 < len(tokens) and tokens[i+1] == '1/4'):
            path.append(tokens[i])
            i += 2
        else:
            i += 1
    return path

def get_cell_from_path(path, depth=3, grid_size=8):
    """
    Converts a nested path of quarters into a grid cell location
    Supports up to 3 levels deep â†’ 64-cell grid
    """
    row = 0
    col = 0
    size = grid_size  # start with 8x8

    for level, quarter in enumerate(path):
        size //= 2  # each level splits the grid further
        base_row, base_col = QUARTER_POSITIONS.get(quarter, (0, 0))
        row += base_row * size
        col += base_col * size

    return row, col, size

# --------------------------------------------
# UI Builder
# --------------------------------------------

def build_grid(root, target_cells, grid_size=8):
    grid_frame = tk.Frame(root)
    grid_frame.pack(pady=10)

    for r in range(grid_size):
        for c in range(grid_size):
            is_target = any(
                r >= tr and r < tr + sz and
                c >= tc and c < tc + sz
                for (tr, tc, sz) in target_cells
            )
            cell = tk.Label(
                grid_frame,
                text='',
                bg='lightblue' if is_target else 'white',
                width=4,
                height=2,
                relief='solid',
                borderwidth=1
            )
            cell.grid(row=r, column=c, padx=1, pady=1)

# --------------------------------------------
# Main App
# --------------------------------------------

def run_app():
    root = tk.Tk()
    root.title("Quarter-Quarter-Quarter Visualizer")

    tk.Label(root, text="Enter Land Description (e.g. NE 1/4 NW 1/4 SW 1/4):").pack()
    entry = tk.Entry(root, width=50)
    entry.insert(0, "NE 1/4 NW 1/4 SW 1/4")
    entry.pack(pady=5)

    def on_submit():
        for widget in root.winfo_children():
            if isinstance(widget, tk.Frame):
                widget.destroy()

        desc = entry.get()
        path = parse_aliquots(desc)
        if not path or len(path) > 3:
            print("Invalid or too deep")
            return

        cell = get_cell_from_path(path, depth=len(path))
        build_grid(root, [cell])

    tk.Button(root, text="Visualize", command=on_submit).pack(pady=5)

    root.mainloop()

# --------------------------------------------
# Run the App
# --------------------------------------------

run_app()
