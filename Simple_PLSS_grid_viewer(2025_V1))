import tkinter as tk

# --------------------------------------------
# Grid Definitions and Utilities
# --------------------------------------------

# Mapping for base quarters
QUARTERS = {
    'NW': (0, 0),
    'NE': (0, 1),
    'SW': (1, 0),
    'SE': (1, 1)
}

# Mapping for half of a quarter (assuming 2x2 split)
HALVES = {
    'N 1/2': [0],  # Top half (row 0)
    'S 1/2': [1],  # Bottom half (row 1)
    'E 1/2': [1],  # Right half (col 1)
    'W 1/2': [0],  # Left half (col 0)
}

# --------------------------------------------
# Input Parser
# --------------------------------------------

def parse_description(description):
    # Example input: "N 1/2 SE 1/4, SW 1/4"
    parts = [part.strip() for part in description.split(',')]
    highlights = []

    for part in parts:
        part = part.upper()
        if '1/4' in part:
            tokens = part.split()
            if len(tokens) == 2:
                # Example: "SW 1/4"
                quarter = tokens[0]
                if quarter in QUARTERS:
                    row, col = QUARTERS[quarter]
                    highlights.append((row, col))
            elif len(tokens) == 3:
                # Example: "N 1/2 SE 1/4"
                half = tokens[0] + ' ' + tokens[1]
                quarter = tokens[2]
                if quarter in QUARTERS and half in HALVES:
                    base_row, base_col = QUARTERS[quarter]
                    for hr in HALVES[half]:
                        highlights.append((base_row * 2 + hr, base_col * 2 + 0))  # 2x2 grid inside quarter
        # You can expand this for deeper nesting like N 1/2 SW 1/4 SE 1/4

    return highlights

# --------------------------------------------
# UI Builder
# --------------------------------------------

def build_section_grid(root, highlights):
    # Create a 4x4 grid (subdivision of the section)
    # Each 1/4 section is 2x2 cells in this grid
    grid_frame = tk.Frame(root)
    grid_frame.pack(pady=10)

    for r in range(4):
        for c in range(4):
            cell = tk.Label(
                grid_frame,
                text='',
                bg='lightgreen' if (r, c) in highlights else 'white',
                width=6,
                height=3,
                relief='solid',
                borderwidth=1
            )
            cell.grid(row=r, column=c, padx=1, pady=1)

# --------------------------------------------
# App Logic
# --------------------------------------------

def run_gui():
    root = tk.Tk()
    root.title("PLSS Section Viewer")

    tk.Label(root, text="Enter Land Description:").pack()
    entry = tk.Entry(root, width=50)
    entry.insert(0, "N 1/2 SE 1/4, SW 1/4")
    entry.pack(pady=5)

    def on_submit():
        for widget in root.winfo_children():
            if isinstance(widget, tk.Frame):
                widget.destroy()  # Clear previous grid

        desc = entry.get()
        highlights = parse_description(desc)
        build_section_grid(root, highlights)

    tk.Button(root, text="Visualize", command=on_submit).pack(pady=5)

    root.mainloop()

# --------------------------------------------
# Run It
# --------------------------------------------

run_gui()
