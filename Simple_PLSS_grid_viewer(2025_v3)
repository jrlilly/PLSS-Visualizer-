import tkinter as tk

# --------------------------------------------
# Grid Definitions
# --------------------------------------------

# PLSS quadrant positions (row, col) as per North-oriented layout
QUARTER_POSITIONS = {
    'NW': (0, 0),
    'NE': (0, 1),
    'SW': (1, 0),
    'SE': (1, 1),
}

# --------------------------------------------
# Parser & Coordinate Resolver
# --------------------------------------------

def parse_aliquots(description):
    """
    Parses a string like:
    "NW 1/4 SE 1/4 SW 1/4"
    Into:
    [["SW", "NW", "NE"], ["SW"], ["SE"]]
    """
    parts = [p.strip() for p in description.upper().split(',')]
    all_paths = []

    for part in parts:
        tokens = part.split()
        path = []
        i = 0
        while i < len(tokens) - 1:
            if tokens[i] in QUARTER_POSITIONS and tokens[i + 1] == '1/4':
                path.append(tokens[i])
                i += 2
            else:
                i += 1
        if path:
            all_paths.append(path[::-1])  # reverse for nesting
    return all_paths

def get_cell_from_path(path, grid_size=8):
    """
    Traverses nested quarter sections (e.g., ['SW', 'NW', 'NE'])
    and returns top-left cell and size.
    """
    row = 0
    col = 0
    size = grid_size

    for quarter in path:
        size //= 2
        base_row, base_col = QUARTER_POSITIONS[quarter]
        row += base_row * size
        col += base_col * size

    return row, col, size

# --------------------------------------------
# UI Builder
# --------------------------------------------

def build_grid(root, target_cells, grid_size=8):
    grid_frame = tk.Frame(root)
    grid_frame.pack(pady=10)

    for r in range(grid_size):
        for c in range(grid_size):
            is_target = any(
                r >= tr and r < tr + sz and
                c >= tc and c < tc + sz
                for (tr, tc, sz) in target_cells
            )
            cell = tk.Label(
                grid_frame,
                text='',
                bg='lightblue' if is_target else 'white',
                width=4,
                height=2,
                relief='solid',
                borderwidth=1
            )
            cell.grid(row=r, column=c, padx=1, pady=1)

# --------------------------------------------
# Main App
# --------------------------------------------

def run_app():
    root = tk.Tk()
    root.title("PLSS Quarter Visualizer")

    tk.Label(root, text="Enter Land Description (e.g. NE 1/4 NW 1/4 SW 1/4):").pack()
    entry = tk.Entry(root, width=60)
    entry.insert(0, "NW 1/4 SE 1/4 SW 1/4")
    entry.pack(pady=5)

    def on_submit():
        for widget in root.winfo_children():
            if isinstance(widget, tk.Frame):
                widget.destroy()

        desc = entry.get()
        paths = parse_aliquots(desc)

        if not paths:
            print("Invalid input or no valid quarter descriptions found.")
            return

        cells = [get_cell_from_path(path) for path in paths]
        build_grid(root, cells)

    tk.Button(root, text="Visualize", command=on_submit).pack(pady=5)

    root.mainloop()

# --------------------------------------------
# Run the App
# --------------------------------------------

if __name__ == "__main__":
    run_app()
